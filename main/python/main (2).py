from flask import Flask, render_template, request
import pandas as pd
from keras.models import load_model
import tensorflow

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

def model_predict(feature_list):
    model_0 = load_model("model00_0 (1).h5")
    model_1 = load_model("model11_0.h5")
    if feature_list[1] == 0:
        return model_0.predict([[-1.08852823e+00, -8.14026408e-01, 0.00000000e+00, -1.67267439e+00,
                                  1.00010151e+00, -1.32812950e+00, -6.40590332e-01, -2.71300649e-01,
                                  1.37765649e+00, 2.43355847e-04, 1.41445698e+00, 4.62836476e-01,
                                 -6.68509945e-02, -7.99637366e-01, -4.71148584e-01, -7.24668716e-02,
                                  1.47021114e+00, 7.66089610e-01, 1.05681596e+00, -1.85836505e-01,
                                 -2.58806367e-01, -6.84026479e-01, -6.44595844e-01, -1.32041697e-01,
                                 -8.30489134e-02, -1.14413376e+00, -8.89640740e-01, 8.92239185e-01,
                                  1.21265931e+00, 1.56454644e+00, 8.60325514e-01, -3.53034891e-01,
                                 -1.45230575e-01, -6.23485448e-01, -6.25638577e-01, -2.36367162e-01,
                                 -3.48649735e-01, -1.67669534e+00, -1.85314713e+00, -1.19374524e+00,
                                  3.32178300e-01, -1.74988599e-01, 1.52958349e-01, 5.56450400e-01,
                                 -1.34493676e+00, -6.72797647e-01, -6.35445700e-01, 2.88004026e-01,
                                 -1.95371609e-01, -1.56988646e+00, -1.65757929e+00, -9.86634697e-01,
                                  8.76337176e-01, -1.14223477e-01, 6.35085905e-01, 4.46129358e-01,
                                 -1.33377471e+00, -6.13249269e-01, -6.16737044e-01, 2.89253770e-01,
                                 -7.28188326e-02, -1.40303101e+00, -1.35602051e+00, -4.11016747e-01,
                                  1.71112627e+00, -2.11933639e-01, 1.27587044e+00, 1.47828333e+00,
                                  2.15643078e+00, 1.56466766e+00, -6.14564862e-02, -2.40267570e-01,
                                 -6.26872179e-01, -5.46764927e-01, -6.96405937e-01, -1.38989130e+00,
                                 -1.34471872e+00, -2.58167235e-01, 2.36934597e+00, -1.41292720e-01,
                                  1.06028703e+00, 1.29867989e+00, 1.75765134e+00, 1.54757691e+00,
                                  1.55965693e-01, -3.35970613e-01, -6.19384421e-01, -5.08578682e-01,
                                 -7.03373037e-01, -1.86722452e+00, -1.98723854e+00, -4.43718153e-01,
                                 -7.80323037e-03, -1.99629471e+00, 3.74980446e-01, 3.13662288e-01,
                                  4.49808334e-02, -1.06232507e+00, 2.80245914e-01, 1.74256866e+00,
                                 -6.06016977e-01, -5.18916881e-01, -6.92950129e-01, -1.92414853e+00,
                                 -2.03481841e+00, -2.57716893e-01, 2.24608316e-01, -1.81660278e+00,
                                  2.88080211e-01, 8.46055014e-01, -9.42608126e-01, -8.96980974e-01,
                                  4.05054477e-01, 1.73840072e+00, -6.13031012e-01, -5.02626401e-01,
                                 -6.97334506e-01, -9.02175409e-01, -6.31166762e-01, 7.51855104e-01,
                                  6.12409580e-01, -1.65958790e+00, 1.73276058e+00, 2.39671973e+00,
                                  2.32815172e+00, 1.88842602e+00, 2.06249423e+00, -1.61432798e-03,
                                 -2.32168425e-01, -1.86314757e-01, -2.84229895e-01, -2.43135789e-01,
                                 -2.43052597e-01, -2.43004718e-01, -2.43123074e-01, -2.42968635e-01,
                                 -2.42589527e-01, -2.42352039e-01, -2.42000046e-01, -2.41738711e-01,
                                 -2.41694680e-01, -2.41933413e-01, -2.41955748e-01, -2.41854182e-01,
                                 -3.14798181e-01, -4.87408745e-01, -3.14485339e-01, -4.86572009e-01,
                                 -3.12987199e-01, -4.85160213e-01, -3.10537282e-01, -4.83021260e-01,
                                 -2.58381374e-01, -2.65493572e-01, -3.64152069e-02, -3.68814468e-02,
                                 -3.67673071e-02, -2.58539282e-02, -4.53820639e-02, -5.61774005e-02,
                                 -1.15156898e-02, -1.51083586e-02, 5.26334239e+00, -1.10018112e-01,
                                 -8.12073399e-02, -1.10590930e-03, 2.89864567e-02, 2.92064500e+00,
                                 -2.16996553e-01, -2.52555914e-01, -2.52555914e-01, -2.84644706e-01,
                                 -2.82791394e-01, -1.23361715e-01, -3.01821263e-01, -2.16996553e-01,
                                 -2.52555914e-01, -2.66768431e-01, -3.32347959e-01, -1.23361715e-01,
                                 -2.52555914e-01, -2.57017954e-01, -2.84644706e-01]])
    else:
        return model_1.predict([[-1.08852823e+00, -8.14026408e-01, 0.00000000e+00, -1.67267439e+00,
                                 1.00010151e+00, -1.32812950e+00, -6.40590332e-01, -2.71300649e-01,
                                 1.37765649e+00, 2.43355847e-04, 1.41445698e+00, 4.62836476e-01,
                                 -6.68509945e-02, -7.99637366e-01, -4.71148584e-01, -7.24668716e-02,
                                 1.47021114e+00, 7.66089610e-01, 1.05681596e+00, -1.85836505e-01,
                                 -2.58806367e-01, -6.84026479e-01, -6.44595844e-01, -1.32041697e-01,
                                 -8.30489134e-02, -1.14413376e+00, -8.89640740e-01, 8.92239185e-01,
                                 1.21265931e+00, 1.56454644e+00, 8.60325514e-01, -3.53034891e-01,
                                 -1.45230575e-01, -6.23485448e-01, -6.25638577e-01, -2.36367162e-01,
                                 -3.48649735e-01, -1.67669534e+00, -1.85314713e+00, -1.19374524e+00,
                                 3.32178300e-01, -1.74988599e-01, 1.52958349e-01, 5.56450400e-01,
                                 -1.34493676e+00, -6.72797647e-01, -6.35445700e-01, 2.88004026e-01,
                                 -1.95371609e-01, -1.56988646e+00, -1.65757929e+00, -9.86634697e-01,
                                 8.76337176e-01, -1.14223477e-01, 6.35085905e-01, 4.46129358e-01,
                                 -1.33377471e+00, -6.13249269e-01, -6.16737044e-01, 2.89253770e-01,
                                 -7.28188326e-02, -1.40303101e+00, -1.35602051e+00, -4.11016747e-01,
                                 1.71112627e+00, -2.11933639e-01, 1.27587044e+00, 1.47828333e+00,
                                 2.15643078e+00, 1.56466766e+00, -6.14564862e-02, -2.40267570e-01,
                                 -6.26872179e-01, -5.46764927e-01, -6.96405937e-01, -1.38989130e+00,
                                 -1.34471872e+00, -2.58167235e-01, 2.36934597e+00, -1.41292720e-01,
                                 1.06028703e+00, 1.29867989e+00, 1.75765134e+00, 1.54757691e+00,
                                 1.55965693e-01, -3.35970613e-01, -6.19384421e-01, -5.08578682e-01,
                                 -7.03373037e-01, -1.86722452e+00, -1.98723854e+00, -4.43718153e-01,
                                 -7.80323037e-03, -1.99629471e+00, 3.74980446e-01, 3.13662288e-01,
                                 4.49808334e-02, -1.06232507e+00, 2.80245914e-01, 1.74256866e+00,
                                 -6.06016977e-01, -5.18916881e-01, -6.92950129e-01, -1.92414853e+00,
                                 -2.03481841e+00, -2.57716893e-01, 2.24608316e-01, -1.81660278e+00,
                                 2.88080211e-01, 8.46055014e-01, -9.42608126e-01, -8.96980974e-01,
                                 4.05054477e-01, 1.73840072e+00, -6.13031012e-01, -5.02626401e-01,
                                 -6.97334506e-01, -9.02175409e-01, -6.31166762e-01, 7.51855104e-01,
                                 6.12409580e-01, -1.65958790e+00, 1.73276058e+00, 2.39671973e+00,
                                 2.32815172e+00, 1.88842602e+00, 2.06249423e+00, -1.61432798e-03,
                                 -2.32168425e-01, -1.86314757e-01, -2.84229895e-01, -2.43135789e-01,
                                 -2.43052597e-01, -2.43004718e-01, -2.43123074e-01, -2.42968635e-01,
                                 -2.42589527e-01, -2.42352039e-01, -2.42000046e-01, -2.41738711e-01,
                                 -2.41694680e-01, -2.41933413e-01, -2.41955748e-01, -2.41854182e-01,
                                 -3.14798181e-01, -4.87408745e-01, -3.14485339e-01, -4.86572009e-01,
                                 -3.12987199e-01, -4.85160213e-01, -3.10537282e-01, -4.83021260e-01,
                                 -2.58381374e-01, -2.65493572e-01, -3.64152069e-02, -3.68814468e-02,
                                 -3.67673071e-02, -2.58539282e-02, -4.53820639e-02, -5.61774005e-02,
                                 -1.15156898e-02, -1.51083586e-02, 5.26334239e+00, -1.10018112e-01,
                                 -8.12073399e-02, -1.10590930e-03, 2.89864567e-02, 2.92064500e+00,
                                 -2.16996553e-01, -2.52555914e-01, -2.52555914e-01, -2.84644706e-01,
                                 -2.82791394e-01, -1.23361715e-01, -3.01821263e-01, -2.16996553e-01,
                                 -2.52555914e-01, -2.66768431e-01, -3.32347959e-01, -1.23361715e-01,
                                 -2.52555914e-01, -2.57017954e-01, -2.84644706e-01
                               ]])

@app.route('/submit', methods=['POST', 'GET'])
def submit():
    if request.method == 'POST':
        # Get form data
        feature_list = []
        product_type = request.form['product_type']
        is_consumption = request.form['is_consumption']
        eic_count = request.form['eic_count']
        installed_capacity = request.form['installed_capacity']
        euros_per_mwh = request.form['euros_per_mwh']
        latitude = request.form['latitude']
        longitude = request.form['longitude']
        hours_ahead = request.form['hours_ahead']
        temperature = request.form['temperature']
        dewpoint = request.form['dewpoint']
        rain = request.form['rain']
        snowfall = request.form['snowfall']
        surface_pressure = request.form['surface_pressure']
        cloudcover_low = request.form['cloudcover_low']
        cloudcover_mid = request.form['cloudcover_mid']
        cloudcover_high = request.form['cloudcover_high']
        cloudcover_total = request.form['cloudcover_total']
        windspeed_10m = request.form['windspeed_10m']
        winddirection_10m = request.form['winddirection_10m']
        shortwave_radiation = request.form['shortwave_radiation']
        direct_solar_radiation = request.form['direct_solar_radiation']
        diffuse_radiation = request.form['diffuse_radiation']
        feature_list = [product_type, is_consumption, eic_count, installed_capacity, euros_per_mwh, latitude,
                        longitude, hours_ahead, temperature, dewpoint, rain, snowfall, surface_pressure,
                        cloudcover_low, cloudcover_mid, cloudcover_high, cloudcover_total, windspeed_10m,
                        winddirection_10m, shortwave_radiation, direct_solar_radiation, diffuse_radiation]

        model_predict(feature_list)

        # Process data (e.g., store in variables)
        # You can perform any further processing or store the values in variables here
        # For demonstration, just returning a string
        return "Form submitted successfully!"


@app.route('/prediction')
def new_page():
    return render_template('prediction.html')

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80, debug=True)